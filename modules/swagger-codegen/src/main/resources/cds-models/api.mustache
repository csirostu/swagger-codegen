package {{apiPackage}};

import au.org.consumerdatastandards.support.*;
import au.org.consumerdatastandards.support.security.EndpointAuth;
import au.org.consumerdatastandards.support.security.EndpointAuthAccess;
import au.org.consumerdatastandards.support.security.EndpointAuthType;
import au.org.consumerdatastandards.api.common.responses.ErrorResponse;
import au.org.consumerdatastandards.api.common.models.Scope;

import {{modelPackage}}.*;

{{#imports}}import {{import}};
{{/imports}}

{{#operations}}
public interface {{classname}}  {

{{#operation}}{{#subresourceOperation}}
    @Endpoint(
        path = "{{{baseName}}}",
        summary = "{{ summary }}",
        description = "{{notes}}",
        requestMethod = RequestMethod.{{ httpMethod }},
        operationId = "{{nickname}}",
        responses = {
            @EndpointResponse(
                responseCode = ResponseCode.OK,
                description = "Successful response for {{ summary }}",
                content = {{returnBaseType}}{{^returnBaseType}}Void{{/returnBaseType}}.class
            ),
            @EndpointResponse(
                responseCode = ResponseCode.UNAUTHORIZED,
                description = "Authorization header missing or invalid token",
                content = ErrorResponse.class
            ),
            @EndpointResponse(
                responseCode = ResponseCode.FORBIDDEN,
                description = "Token has incorrect scope or a security policy was violated.",
                content = ErrorResponse.class
            )
        }{{#hasCdsScopes}},
        requiredAuth = {
            @EndpointAuth(
                type = EndpointAuthType.CDS_FAPI,
                access = EndpointAuthAccess.READ_ONLY,
                scopes = {
                	{{#cdsScopes}}Scope.{{.}}{{#hasMore}},{{/hasMore}}
                	{{/cdsScopes}}
                }
            )
        }{{/hasCdsScopes}}
    )
    {{returnBaseType}}{{^returnBaseType}}Void{{/returnBaseType}} {{operationId}}({{#allParams}}
        @Param(        
             name = "{{paramName}}",
             description = "{{description}}",
             in = {{#isHeaderParam}}ParamLocation.HEADER{{/isHeaderParam}}{{#isPathParam}}ParamLocation.PATH{{/isPathParam}}{{#isQueryParam}}ParamLocation.QUERY{{/isQueryParam}}{{#isBodyParam}}ParamLocation.BODY{{/isBodyParam}}{{#defaultValue}},
             defaultValue = "{{{defaultValue}}}"{{/defaultValue}}{{#isRequired}},
             required = true{{/isRequired}}{{^isPrimitive}},
             schema = {{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{dataType}}{{/isEnum}}.class{{/isPrimitive}}
        ) 
        {{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{dataType}}{{/isEnum}} {{paramName}}{{#hasMore}}, {{/hasMore}}
    {{/allParams}});
{{/subresourceOperation}}{{/operation}}
{{/operations}}

}


