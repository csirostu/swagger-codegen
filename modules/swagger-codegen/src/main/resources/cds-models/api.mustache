package {{apiPackage}};

import au.org.consumerdatastandards.support.*;
import au.org.consumerdatastandards.support.security.EndpointAuth;
import au.org.consumerdatastandards.support.security.EndpointAuthAccess;
import au.org.consumerdatastandards.support.security.EndpointAuthType;
import au.org.consumerdatastandards.api.common.responses.ErrorResponse;
import au.org.consumerdatastandards.api.common.models.Scope;
import au.org.consumerdatastandards.support.data.Format;
import au.org.consumerdatastandards.support.data.CustomAttribute;
import au.org.consumerdatastandards.support.data.StringFormat;
import au.org.consumerdatastandards.support.data.CustomAttributes;


import {{modelPackage}}.*;

{{#imports}}import {{import}};
{{/imports}}

{{#operations}}
@Section(name = "{{classname}}", tags = {"{{classname}}"})
public interface {{classname}}  {

{{#operation}}{{#subresourceOperation}}
    @Endpoint(
        path = "{{{baseName}}}",
        summary = "{{ summary }}",
        description = "{{{notes}}}",
        requestMethod = RequestMethod.{{ httpMethod }},
        operationId = "{{nickname}}",
        responses = {
            @EndpointResponse(
                responseCode = ResponseCode.OK,
                description = "Successful response for {{ summary }}",
                content = {{returnBaseType}}{{^returnBaseType}}Void{{/returnBaseType}}.class
            ){{#hasCdsScopes}},
            @EndpointResponse(
                responseCode = ResponseCode.UNAUTHORIZED,
                description = "Authorization header missing or invalid token",
                content = ErrorResponse.class
            ),
            @EndpointResponse(
                responseCode = ResponseCode.FORBIDDEN,
                description = "Token has incorrect scope or a security policy was violated.",
                content = ErrorResponse.class
            ){{/hasCdsScopes}}
        }{{#hasCdsScopes}},
        requiredAuth = {
            @EndpointAuth(
                type = EndpointAuthType.CDS_FAPI,
                access = EndpointAuthAccess.READ_ONLY,
                scopes = {
                	{{#cdsScopes}}Scope.{{.}}{{#hasMore}},{{/hasMore}}
                	{{/cdsScopes}}
                }
            )
        }{{/hasCdsScopes}}
    ){{#hasCdsScopes}}
    @CustomAttributes({ 
            @CustomAttribute(name = "x-version", value = "1"){{#cdsScopesLower}},
            @CustomAttribute(name = "x-scopes", value = "{{.}}", multiple = true){{#hasMore}}, {{/hasMore}}{{/cdsScopesLower}}
    }){{/hasCdsScopes}}
    {{returnBaseType}}{{^returnBaseType}}Void{{/returnBaseType}} {{operationId}}({{#allParams}}
        @Param(        
             name = "{{paramQueryName}}",
             description = "{{description}}",
             in = {{#isHeaderParam}}ParamLocation.HEADER{{/isHeaderParam}}{{#isPathParam}}ParamLocation.PATH{{/isPathParam}}{{#isQueryParam}}ParamLocation.QUERY{{/isQueryParam}}{{#isBodyParam}}ParamLocation.BODY{{/isBodyParam}}{{#defaultValue}},
             defaultValue = "{{{defaultValue}}}"{{/defaultValue}}{{#isRequired}},
             required = true{{/isRequired}}{{#isReference}},
             reference = "{{referenceName}}"{{/isReference}}
        ){{#cdsCustomAttributes}}
        @CustomAttributes({
        {{#cdsType}}    @CustomAttribute(name = "x-type", value = "{{{cdsType}}}"){{/cdsType}}
        }){{/cdsCustomAttributes}}{{#hasCdsType}}{{#isDateTimeString}}
        @StringFormat(format = Format.DATE_TIME){{/isDateTimeString}}{{#isDateString}}
        @StringFormat(format = Format.DATE){{/isDateString}}{{#isAcnString}}
        @StringFormat(format = Format.ACN){{/isAcnString}}{{#isAbnString}}
        @StringFormat(format = Format.ABN){{/isAbnString}}{{#isRateString}}
        @StringFormat(format = Format.RATE){{/isRateString}}{{#isMaskedPANString}}
        @StringFormat(format = Format.MASKED_PAN){{/isMaskedPANString}}{{#isMaskedAccountString}}
        @StringFormat(format = Format.MASKED_ACCOUNT){{/isMaskedAccountString}}{{#isURIString}}
        @StringFormat(format = Format.URI){{/isURIString}}{{#isAsciiString}}
        @StringFormat(format = Format.ASCII){{/isAsciiString}}{{#isAmountString}}
        @StringFormat(format = Format.AMOUNT){{/isAmountString}}{{#isCurrencyString}}
        @StringFormat(format = Format.CURRENCY){{/isCurrencyString}}{{#isNaturalNumber}}
        @IntegerRange(min = 0){{/isNaturalNumber}}{{#isPositiveInteger}}
        @IntegerRange(min = 1)(Format.PositiveInteger){{/isPositiveInteger}}{{#isNegativeInteger}}
        @IntegerRange(max = 0){{/isNegativeInteger}}{{/hasCdsType}}
        {{#isEnum}}Param{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{dataType}}{{/isEnum}} {{paramName}}{{#hasMore}}, {{/hasMore}}
    {{/allParams}});
{{/subresourceOperation}}{{/operation}}
{{/operations}}

}


